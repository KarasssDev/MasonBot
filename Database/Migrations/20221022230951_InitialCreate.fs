// <auto-generated />
namespace Database.Migrations

open System
open Database
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion

[<DbContext(typeof<Connection.MasonDbContext>)>]
[<Migration("20221022230951_InitialCreate")>]
type InitialCreate() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.CreateTable(
            name = "Users"
            ,columns = (fun table -> 
            {|
                TelegramId =
                    table.Column<Int64>(
                        nullable = false
                        ,``type`` = "INTEGER"
                    ).Annotation("Sqlite:Autoincrement", true)
                Wallet =
                    table.Column<string>(
                        nullable = true
                        ,``type`` = "TEXT"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Users", (fun x -> (x.TelegramId) :> obj)
                    ) |> ignore
                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "Votings"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                CreatorTelegramId =
                    table.Column<Int64>(
                        nullable = true
                        ,``type`` = "INTEGER"
                    )
                Description =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                StartDate =
                    table.Column<DateTime>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                Duration =
                    table.Column<TimeSpan>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Votings", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_Votings_Users_CreatorTelegramId"
                        ,column = (fun x -> (x.CreatorTelegramId) :> obj)
                        ,principalTable = "Users"
                        ,principalColumn = "TelegramId"
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "Variants"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                Description =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                VotingId =
                    table.Column<Guid>(
                        nullable = true
                        ,``type`` = "TEXT"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Variants", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_Variants_Votings_VotingId"
                        ,column = (fun x -> (x.VotingId) :> obj)
                        ,principalTable = "Votings"
                        ,principalColumn = "Id"
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "Votes"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<Guid>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                UserTelegramId =
                    table.Column<Int64>(
                        nullable = true
                        ,``type`` = "INTEGER"
                    )
                VariantId =
                    table.Column<Guid>(
                        nullable = true
                        ,``type`` = "TEXT"
                    )
                NftAddress =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Votes", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_Votes_Users_UserTelegramId"
                        ,column = (fun x -> (x.UserTelegramId) :> obj)
                        ,principalTable = "Users"
                        ,principalColumn = "TelegramId"
                        ) |> ignore

                    table.ForeignKey(
                        name = "FK_Votes_Variants_VariantId"
                        ,column = (fun x -> (x.VariantId) :> obj)
                        ,principalTable = "Variants"
                        ,principalColumn = "Id"
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_Variants_VotingId"
            ,table = "Variants"
            ,column = "VotingId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_Votes_UserTelegramId"
            ,table = "Votes"
            ,column = "UserTelegramId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_Votes_VariantId"
            ,table = "Votes"
            ,column = "VariantId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_Votings_CreatorTelegramId"
            ,table = "Votings"
            ,column = "CreatorTelegramId"
            ) |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "Votes"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Variants"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Votings"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Users"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder.HasAnnotation("ProductVersion", "6.0.9") |> ignore

        modelBuilder.Entity("Database.Connection+User", (fun b ->

            b.Property<Int64>("TelegramId")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<string option>("Wallet")
                .IsRequired(false)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("TelegramId")
                |> ignore


            b.ToTable("Users") |> ignore

        )) |> ignore

        modelBuilder.Entity("Database.Connection+Variant", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("TEXT")
                |> ignore

            b.Property<string>("Description")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<Nullable<Guid>>("VotingId")
                .IsRequired(false)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("VotingId")
                |> ignore

            b.ToTable("Variants") |> ignore

        )) |> ignore

        modelBuilder.Entity("Database.Connection+Vote", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("TEXT")
                |> ignore

            b.Property<string>("NftAddress")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<Nullable<Int64>>("UserTelegramId")
                .IsRequired(false)
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<Nullable<Guid>>("VariantId")
                .IsRequired(false)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("UserTelegramId")
                |> ignore


            b.HasIndex("VariantId")
                |> ignore

            b.ToTable("Votes") |> ignore

        )) |> ignore

        modelBuilder.Entity("Database.Connection+Voting", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("TEXT")
                |> ignore

            b.Property<Nullable<Int64>>("CreatorTelegramId")
                .IsRequired(false)
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<string>("Description")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<TimeSpan>("Duration")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<DateTime>("StartDate")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("CreatorTelegramId")
                |> ignore

            b.ToTable("Votings") |> ignore

        )) |> ignore
        modelBuilder.Entity("Database.Connection+Variant", (fun b ->
            b.HasOne("Database.Connection+Voting", "Voting")
                .WithMany()
                .HasForeignKey("VotingId")
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Database.Connection+Vote", (fun b ->
            b.HasOne("Database.Connection+User", "User")
                .WithMany()
                .HasForeignKey("UserTelegramId")
                |> ignore
            b.HasOne("Database.Connection+Variant", "Variant")
                .WithMany()
                .HasForeignKey("VariantId")
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Database.Connection+Voting", (fun b ->
            b.HasOne("Database.Connection+User", "Creator")
                .WithMany()
                .HasForeignKey("CreatorTelegramId")
                |> ignore

        )) |> ignore

